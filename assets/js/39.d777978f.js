(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{315:function(t,a,s){"use strict";s.r(a);var e=s(4),r=Object(e.a)({},function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"什么是-typescript-中的类型-两种观点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是-typescript-中的类型-两种观点","aria-hidden":"true"}},[t._v("#")]),t._v(" 什么是 TypeScript 中的类型,两种观点")]),t._v(" "),s("blockquote",[s("p",[t._v("该译文对应原文 "),s("a",{attrs:{href:"https://2ality.com/2020/02/understanding-types-typescript.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("What is a type in TypeScript? Two perspectives"),s("OutboundLink")],1)])]),t._v(" "),s("h2",{attrs:{id:"_1-三个问题针对每种观点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-三个问题针对每种观点","aria-hidden":"true"}},[t._v("#")]),t._v(" 1 三个问题针对每种观点")]),t._v(" "),s("p",[t._v("以下三个问题对理解类型系统如何工作至关重要。每个问题都需要采用两种观点来解答。")]),t._v(" "),s("ol",[s("li",[s("p",[s("code",[t._v("myVariable")]),t._v(" 属于类型  "),s("code",[t._v("MyType")]),t._v(" 意味着什么")]),t._v(" "),s("div",{staticClass:"language-ts extra-class"},[s("pre",{pre:!0,attrs:{class:"language-ts"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" myVariable"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" MyType\n")])])])]),t._v(" "),s("li",[s("p",[s("code",[t._v("SourceType")]),t._v(" 赋给了 "),s("code",[t._v("TargetType")]),t._v(" 么")]),t._v(" "),s("div",{staticClass:"language-ts extra-class"},[s("pre",{pre:!0,attrs:{class:"language-ts"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" source"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("SourceType "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*...*/")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" target"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("TargetType "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" source"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*...*/")]),t._v("\n")])])])]),t._v(" "),s("li",[s("p",[t._v("TypeUnion 如何从 Type1，Type2和 Type3 中派生的？")]),t._v(" "),s("div",{staticClass:"language-ts extra-class"},[s("pre",{pre:!0,attrs:{class:"language-ts"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" typeUnion "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Type1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" Type2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" Type3"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])])]),t._v(" "),s("h2",{attrs:{id:"_2-观点一：类型是值的集合"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-观点一：类型是值的集合","aria-hidden":"true"}},[t._v("#")]),t._v(" 2 观点一：类型是值的集合")]),t._v(" "),s("p",[t._v("在这种视角下,类型是值的的集合")]),t._v(" "),s("ol",[s("li",[t._v("如果 "),s("code",[t._v("myVariable")]),t._v(" 属于类型 "),s("code",[t._v("MyType")]),t._v(",表示所有可以赋给 "),s("code",[t._v("myVariable")]),t._v(" 的值都必须是属于 "),s("code",[t._v("MyType")]),t._v(" 集合的元素")]),t._v(" "),s("li",[s("code",[t._v("sourceType")]),t._v(" 可以赋给 "),s("code",[t._v("TargetType")]),t._v(" 是 "),s("code",[t._v("SourceType")]),t._v(" 为 "),s("code",[t._v("TargetType")]),t._v(" 的子集。")]),t._v(" "),s("li",[t._v("联合类型(TypeUnion) 属于类型 "),s("code",[t._v("Type1")]),t._v(","),s("code",[t._v("Type2")]),t._v(" 和 "),s("code",[t._v("Type3")]),t._v(" 是集合理论的并集")])]),t._v(" "),s("h2",{attrs:{id:"_3-观点-2-类型兼容关系"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-观点-2-类型兼容关系","aria-hidden":"true"}},[t._v("#")]),t._v(" 3 观点 2: 类型兼容关系")]),t._v(" "),s("p",[t._v("在这种视角下: 我们不关心值和在代码运行时如何变化。取而代之，我们更多采用静态视角。")]),t._v(" "),s("ul",[s("li",[t._v("源代码都有位置,每个位置都有一个静态类型。在有 TypeScript 识别的编辑器,我们可以看到静态类型的位置如果光标悬停在代码上。")]),t._v(" "),s("li",[t._v("源码位置通过赋值，函数调用等关联上目标位置时。源码位置对应的类型必须和目标位置的类型兼容。TypeScript 规范定义类型兼容称之为"),s("a",{attrs:{href:"https://github.com/microsoft/TypeScript/blob/master/doc/spec.md#3.11",target:"_blank",rel:"noopener noreferrer"}},[t._v("类型关联"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://github.com/microsoft/TypeScript/blob/master/doc/spec.md#3114-assignment-compatibility",target:"_blank",rel:"noopener noreferrer"}},[t._v("类型关联赋值兼容性"),s("OutboundLink")],1),t._v(" 定义了何时源类型 S 可以赋值给目标类型 T\n"),s("ul",[s("li",[t._v("S 和 T 是相同的类型")]),t._v(" "),s("li",[t._v("S 和 T 是类型 any")]),t._v(" "),s("li",[t._v("等等")])])])]),t._v(" "),s("p",[t._v("让我们思考上述问题:")]),t._v(" "),s("ol",[s("li",[s("code",[t._v("myVariable")]),t._v(" 属于类型 "),s("code",[t._v("MyType")]),t._v(" 如果属于 "),s("code",[t._v("myVariable")]),t._v(" 的静态类型可以赋给 "),s("code",[t._v("MyType")])]),t._v(" "),s("li",[s("code",[t._v("SourceType")]),t._v(" 是可以赋给 "),s("code",[t._v("TargetType")]),t._v(" 如果它们赋值兼容")]),t._v(" "),s("li",[t._v("联合类型(type unions) 如何工作参考"),s("a",{attrs:{href:"https://github.com/microsoft/TypeScript/blob/master/doc/spec.md#3111-apparent-members",target:"_blank",rel:"noopener noreferrer"}},[t._v("类型关系的显示成员"),s("OutboundLink")],1)])]),t._v(" "),s("p",[t._v("TypeScript 类型系统一个非常有意思的特性是相同的变量可以在不同位置有不同的静态类型。")]),t._v(" "),s("div",{staticClass:"language-ts extra-class"},[s("pre",{pre:!0,attrs:{class:"language-ts"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" arr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 推导类型: any[]")]),t._v("\narr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\narr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 推导类型: number[]")]),t._v("\narr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\narr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'abc'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 推导类型: (string | number)[]")]),t._v("\narr"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h2",{attrs:{id:"_4-标明类型系统-nominal-type-systems-vs-结构类型系统-structural-type-systems"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-标明类型系统-nominal-type-systems-vs-结构类型系统-structural-type-systems","aria-hidden":"true"}},[t._v("#")]),t._v(" 4 标明类型系统(Nominal type systems) vs 结构类型系统(structural type systems )")]),t._v(" "),s("p",[t._v("静态类型系统的一个任务是判断两种静态类型是否兼容。")]),t._v(" "),s("ul",[s("li",[t._v("静态类型 "),s("code",[t._v("U")]),t._v(" 是一个实际的参数(例如通过函数调用)")]),t._v(" "),s("li",[t._v("静态类型 "),s("code",[t._v("T")]),t._v(" 是一个相关的格式化参数(指定为函数定义的一部分)")])]),t._v(" "),s("blockquote",[s("p",[t._v("笔者注: 这里 "),s("code",[t._v("U")]),t._v(" 是实参(真实传入的值), "),s("code",[t._v("T")]),t._v(" 是形参(函数申明传入的变量)")])]),t._v(" "),s("p",[t._v("这通常意味着检查 "),s("code",[t._v("U")]),t._v(" 是否属于 "),s("code",[t._v("T")]),t._v(" 的子类型。两种方法实现这种检查(粗略来看)")]),t._v(" "),s("ul",[s("li",[t._v("在标明类型系统, 两种静态类型是相等的如果他们拥有相同的标识符(名字),一个类型是另一个的子类型如果它们的子类型关系式显示申明的。\n"),s("ul",[s("li",[t._v("表明类型语言例如 C++,Java,C,Swift 和 Rust")])])]),t._v(" "),s("li",[t._v("在结构化类型系统, 两种静态类型是相同的如果他们拥有相同的结构(如果它们的各部分名字和类型均相同)。类型 "),s("code",[t._v("U")]),t._v(" 是另一种类型 "),s("code",[t._v("T")]),t._v(" 的子类型如果 "),s("code",[t._v("U")]),t._v(" 拥有类型 "),s("code",[t._v("T")]),t._v(" 的所有部分(类型 U 可能还包含其他部分),而且类型 "),s("code",[t._v("U")]),t._v(" 的每个部分属于类型 T 相关联部分的子类型.\n"),s("ul",[s("li",[t._v("结构化类型语言 OCaml/ReasonML,Haskell 和 TypeScript")])])])]),t._v(" "),s("p",[t._v("以下的代码在标明类型系统中会出错,但在 TypeScript 结构类型系统中是合法的。因为类 A 和 类 B 拥有相同的结构。")]),t._v(" "),s("div",{staticClass:"language-ts extra-class"},[s("pre",{pre:!0,attrs:{class:"language-ts"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'A'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("B")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'B'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" somaVariable"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("A")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("B")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n")])])]),s("p",[t._v("TypeScript 接口同样是结构化的。不必为了匹配而实现该接口。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Point")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" number"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" number"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" point"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Point "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h2",{attrs:{id:"进一步阅读"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#进一步阅读","aria-hidden":"true"}},[t._v("#")]),t._v(" 进一步阅读")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://www.typescriptlang.org/docs/handbook/type-compatibility.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("TypeScript 手册类型兼容"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://github.com/microsoft/TypeScript/blob/master/doc/spec.md#3.11",target:"_blank",rel:"noopener noreferrer"}},[t._v("TypeScript 规范类型关系章节"),s("OutboundLink")],1)])]),t._v(" "),s("hr"),t._v(" "),s("h2",{attrs:{id:"笔者注"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#笔者注","aria-hidden":"true"}},[t._v("#")]),t._v(" 笔者注")]),t._v(" "),s("p",[t._v("理解 TypeScript 是结构化类型系统。可以帮助你更好的使用 TypeScript。")]),t._v(" "),s("p",[t._v("TypeScript 在设计之初定义了一系列准则，参考"),s("a",{attrs:{href:"https://github.com/microsoft/TypeScript/wiki/TypeScript-Design-Goals",target:"_blank",rel:"noopener noreferrer"}},[t._v("TypeScript 设计目的"),s("OutboundLink")],1),t._v(" 翻译如下:")]),t._v(" "),s("p",[s("strong",[t._v("目标:")])]),t._v(" "),s("ol",[s("li",[t._v("静态识别可能出错的结构")]),t._v(" "),s("li",[t._v("提供一个结构机制用于组织大型代码")]),t._v(" "),s("li",[t._v("产出代码不要增加运行时负担")]),t._v(" "),s("li",[t._v("产出干净,惯用的,可识别的 js 代码")]),t._v(" "),s("li",[t._v("产出一种可组合且易于推理的语言")]),t._v(" "),s("li",[t._v("向当前和未来的 ECMAScript 规范靠拢")]),t._v(" "),s("li",[t._v("保留所有 JavaScript 代码运行时特性")]),t._v(" "),s("li",[t._v("避免添加表达式层面的语法")]),t._v(" "),s("li",[t._v("使用一致,完全可擦除的结构化类型系统")]),t._v(" "),s("li",[t._v("成为跨平台的工具")]),t._v(" "),s("li",[t._v("不要和 TypeScript 发生破坏性迭代")])]),t._v(" "),s("p",[s("strong",[t._v("非目标:")])]),t._v(" "),s("ol",[s("li",[t._v("完全模仿现有语言,使用当前 JavaScript 的特性和编程设计者的意图来开发一门更有价值的语言作为替代。")]),t._v(" "),s("li",[t._v("激进的优化程序运行时性能,产出在运行平台性能更良好的 JavaScript 代码")]),t._v(" "),s("li",[t._v("专注于完全或证明正确的类型系统,取代在正确性和高产性上进行平衡。")]),t._v(" "),s("li",[t._v("提供一个端到端的编译管道,取代创建一个可扩展的外部工具用于编译器或其他更复杂的构建流")]),t._v(" "),s("li",[t._v("在编码中添加或依赖与运行时的类型信息,或产出基于类型系统的不同代码。取代鼓励不依赖于运行时元数据的编程模式")]),t._v(" "),s("li",[t._v("提供额外的运行时函数或库。取代使用 TypeScript 描述已经存在的库")]),t._v(" "),s("li",[t._v("引入一些可能使用户惊讶的特性。取代其他语言经过考量而采用的通用模式。")])]),t._v(" "),s("p",[t._v("根据该设计主旨可以看到 TypeScript 的如下特性")]),t._v(" "),s("ol",[s("li",[t._v("属于静态类型检查\n"),s("blockquote",[s("p",[t._v("这意味着不应该在运行时依赖 TypeScript 类型组织代码逻辑")])])]),t._v(" "),s("li",[t._v("属于结构化类型\n"),s("blockquote",[s("p",[t._v("不要执着于类型的完全匹配只要结构相似就是相同类型")])])]),t._v(" "),s("li",[t._v("类型检查为首要准则\n"),s("blockquote",[s("p",[t._v("TypeScript 准确的说并不是一门语言,它只是类型检查的工具,应该把"),s("strong",[t._v("学习重点放在更好的类型检查上,而非它所提供的语言特性")])])])])]),t._v(" "),s("p",[t._v("工作是马拉松而非短跑\n保持谦逊,而非愚蠢\n和自己比较而非他人\n尊重人,而非头衔\n选择挑战,而非安逸\n工作从白板开始,而非键盘\n价值驱动,而非代码\n热爱生活,而非工作")])])},[],!1,null,null,null);a.default=r.exports}}]);